= simple_form_for([:admin, @site], url: @site.new_record? ? admin_sites_path : admin_site_path, html: {multipart: true}) do |f|
  ruby:
    scribable_objects = Scribo.config.scribable_objects.map {|so| ["#{so.name} (#{so.class.name.demodulize})", so.to_sgid] }
    selected = scribable_objects.find {|so| GlobalID::Locator.locate_signed(so[1]) == @site.scribable}
  br
  = f.association :scribable, label: 'For', collection: scribable_objects, selected: selected
  = f.input :properties, as: :text, input_html: {value: YAML.dump(f.object.properties), data: { controller: "editor", target: 'editor.textarea', "editor-height" => '250px', lang: 'application/yaml', mode: {name: 'liquid', base: 'application/yaml'}}}
  = f.button :button, 'Save', name: 'commit', value: 'save', class: 'btn-primary', data: { disable_with: 'Save' }
  = f.button :button, 'Continue', name: 'commit', value: 'continue', data: { disable_with: 'Continue' }

- content_for :context_menu do
  - unless @site.new_record?
    - if @site.contents.count > 0
      =< link_to(t('scribo.context_menu.export'), export_admin_site_path, class: 'btn btn-primary', 'data-turbolinks' => 'false')
    ruby:
        first_content = @site.contents.first
    - if first_content
      =< link_to(t('scribo.context_menu.editor'), edit_admin_site_content_path(@site, @site.contents.first), class: 'btn btn-primary')
    - else
      =< link_to(t('scribo.context_menu.editor'), new_admin_site_content_path(@site), class: 'btn btn-primary')
